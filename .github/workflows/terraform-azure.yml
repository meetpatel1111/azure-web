name: Terraform - Azure deploy (with remote backend)

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to run'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
          - refresh

permissions:
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      TF_IN_AUTOMATION: "true"
      # Backend constants (shared)
      BACKEND_RG: tfstate-shared-rg
      BACKEND_SA: sttfstateshared
      BACKEND_CONTAINER: tfstate
      BACKEND_KEY: web-server-vm.tfstate
      # TF directory - change if your terraform code lives elsewhere
      TF_DIR: .
      SECRETS_TFVAR: secrets.tfvars

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.5

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Export ARM_* env vars from AZURE_CREDENTIALS
        shell: bash
        run: |
          echo "Exporting ARM_* from AZURE_CREDENTIALS"
          echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV

      - name: Ensure TFState resource group exists (idempotent)
        shell: bash
        run: |
          az group create --name "${BACKEND_RG}" --location eastus --output none

      - name: Ensure Storage Account exists for remote state (idempotent)
        shell: bash
        run: |
          az storage account create \
            --name "${BACKEND_SA}" \
            --resource-group "${BACKEND_RG}" \
            --location eastus \
            --sku Standard_LRS \
            --kind StorageV2 \
            --enable-hierarchical-namespace false \
            --https-only true || true

      - name: Ensure blob container exists (idempotent)
        shell: bash
        run: |
          az storage container create \
            --name "${BACKEND_CONTAINER}" \
            --account-name "${BACKEND_SA}" \
            --auth-mode login || true

      - name: Create secrets.tfvars (safe - contains only sensitive vars)
        shell: bash
        run: |
          # Do NOT create terraform.auto.tfvars — create an explicit var-file instead
          if [ -z "${{ secrets.ADMIN_SSH_PUB }}" ]; then
            echo "ERROR: ADMIN_SSH_PUB secret is missing or empty. Create repo secret ADMIN_SSH_PUB containing your SSH public key (ssh-rsa ...)." >&2
            exit 1
          fi

          # Write the secrets file using echo (safe for GitHub Actions interpolation)
          # Put quotes around the public key so it's valid HCL string.
          echo "admin_ssh_public_key = \"${{ secrets.ADMIN_SSH_PUB }}\"" > "${SECRETS_TFVAR}"

          # Add additional sensitive variables here if needed, using the same pattern:
          # echo 'some_secret = "value"' >> "${SECRETS_TFVAR}"

          echo "Wrote ${SECRETS_TFVAR} (bytes: $(wc -c < ${SECRETS_TFVAR}))"

      - name: Terraform Init (try auth_mode=login)
        shell: bash
        run: |
          set -euo pipefail
          cd "${TF_DIR}"
          echo "Attempting 'terraform init' with auth_mode=login..."
          if terraform init -input=false -reconfigure \
              -backend-config="resource_group_name=${BACKEND_RG}" \
              -backend-config="storage_account_name=${BACKEND_SA}" \
              -backend-config="container_name=${BACKEND_CONTAINER}" \
              -backend-config="key=${BACKEND_KEY}" \
              -backend-config="auth_mode=login"
          then
            echo "Init succeeded with auth_mode=login"
          else
            echo "Init with auth_mode=login failed — will attempt to fetch storage key and init with access_key"
            KEY=$(az storage account keys list --resource-group "${BACKEND_RG}" --account-name "${BACKEND_SA}" --query '[0].value' -o tsv) || {
              echo "Failed to fetch storage account key"; exit 1;
            }
            echo "Retrying terraform init with access_key (masked)..."
            terraform init -input=false -reconfigure \
              -backend-config="resource_group_name=${BACKEND_RG}" \
              -backend-config="storage_account_name=${BACKEND_SA}" \
              -backend-config="container_name=${BACKEND_CONTAINER}" \
              -backend-config="key=${BACKEND_KEY}" \
              -backend-config="access_key=${KEY}"
          fi

      - name: Verify backend & list blobs (debug)
        shell: bash
        run: |
          set -euo pipefail
          cd "${TF_DIR}"
          echo "Reconfigure backend (debug) to show status"
          terraform init -reconfigure \
            -backend-config="resource_group_name=${BACKEND_RG}" \
            -backend-config="storage_account_name=${BACKEND_SA}" \
            -backend-config="container_name=${BACKEND_CONTAINER}" \
            -backend-config="key=${BACKEND_KEY}" \
            -backend-config="auth_mode=login" || true

          echo ""
          echo "Checking container existence and listing blobs (auth-mode=login)"
          az storage container exists --account-name "${BACKEND_SA}" --name "${BACKEND_CONTAINER}" --auth-mode login -o json || true
          az storage blob list --account-name "${BACKEND_SA}" --container-name "${BACKEND_CONTAINER}" --auth-mode login --output table || true

      - name: Terraform Format (auto-fix)
        shell: bash
        run: |
          cd "${TF_DIR}"
          terraform fmt -write

      - name: Terraform Validate
        shell: bash
        run: |
          cd "${TF_DIR}"
          # run validate using var-file so validations referencing variables succeed
          VF="../${SECRETS_TFVAR}"
          if [ ! -f "${VF}" ]; then
            VF="${SECRETS_TFVAR}"
          fi
          terraform validate -var-file="${VF}" || terraform validate

      - name: Terraform Run (plan/apply/destroy/refresh) using secrets.tfvars
        shell: bash
        env:
          ACTION: ${{ github.event.inputs.action }}
          GITHUB_REF: ${{ github.ref }}
        run: |
          set -euo pipefail
          cd "${TF_DIR}"
          echo "Requested action: ${ACTION}"

          # determine var-file path (workflow writes secrets.tfvars into repo root)
          VF="../${SECRETS_TFVAR}"
          if [ ! -f "${VF}" ]; then
            VF="${SECRETS_TFVAR}"
          fi

          case "${ACTION}" in
            plan)
              echo "Running terraform plan with var-file ${VF}..."
              terraform plan -out=tfplan -input=false -var-file="${VF}"
              echo "Plan saved to tfplan"
              ;;
            apply)
              if [ "${GITHUB_REF:-refs/heads/unknown}" != "refs/heads/main" ]; then
                echo "ERROR: apply is only allowed from 'main' branch. Current ref: ${GITHUB_REF}" >&2
                exit 1
              fi
              echo "Running terraform plan then apply using var-file ${VF}..."
              terraform plan -out=tfplan -input=false -var-file="${VF}"
              terraform apply -input=false -auto-approve tfplan
              ;;
            destroy)
              echo "Running terraform plan -destroy (var-file ${VF}) and apply to destroy resources..."
              terraform plan -destroy -out=tfplan-destroy -input=false -var-file="${VF}"
              terraform apply -input=false tfplan-destroy
              ;;
            refresh)
              echo "Running terraform refresh (var-file ${VF})..."
              terraform refresh -input=false -var-file="${VF}"
              ;;
            *)
              echo "Unknown action: ${ACTION}" >&2
              exit 1
              ;;
          esac

      - name: List backend blobs after run (verify tfstate)
        shell: bash
        run: |
          echo "Listing blobs in tfstate container (auth-mode=login preferred):"
          az storage blob list --account-name "${BACKEND_SA}" --container-name "${BACKEND_CONTAINER}" --auth-mode login --output table || echo "failed to list blobs with auth-mode=login"

      - name: Attempt terraform state pull (if remote state exists)
        shell: bash
        run: |
          cd "${TF_DIR}"
          if terraform state pull > /tmp/remote_state.json 2>/dev/null; then
            echo "Pulled remote state (first 200 chars):"
            head -c 200 /tmp/remote_state.json || true
            echo ""
          else
            echo "No remote state found or unable to pull."
          fi

    name: Terraform - Azure deploy (with remote backend)

    on:
      workflow_dispatch:

    permissions:
      contents: read

    jobs:
      deploy:
        runs-on: ubuntu-latest
        env:
          TF_IN_AUTOMATION: "true"

        steps:
          - name: Checkout
            uses: actions/checkout@v4

          - name: Setup Terraform
            uses: hashicorp/setup-terraform@v2
            with:
              terraform_version: 1.6.5

          - name: Azure Login
            uses: azure/login@v1
            with:
              creds: ${{ secrets.AZURE_CREDENTIALS }}

          - name: Export ARM_* env vars from AZURE_CREDENTIALS
            run: |
              echo "Parsing AZURE_CREDENTIALS and exporting ARM_* env vars"
              echo "ARM_SUBSCRIPTION_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .subscriptionId)" >> $GITHUB_ENV
              echo "ARM_CLIENT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientId)" >> $GITHUB_ENV
              echo "ARM_CLIENT_SECRET=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .clientSecret)" >> $GITHUB_ENV
              echo "ARM_TENANT_ID=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r .tenantId)" >> $GITHUB_ENV
            shell: bash

          - name: Ensure TFState resource group exists
            run: |
              az group create --name tfstate-shared-rg --location eastus
            shell: bash

          - name: Ensure Storage Account exists for remote state
            run: |
              az storage account create                 --name sttfstateshared                 --resource-group tfstate-shared-rg                 --location eastus                 --sku Standard_LRS                 --kind StorageV2                 --enable-hierarchical-namespace false                 --https-only true || true
            shell: bash

          - name: Ensure blob container exists
            run: |
              az storage container create                 --name tfstate                 --account-name sttfstateshared                 --auth-mode login || true
            shell: bash

          - name: Get storage account key
            id: getkey
            run: |
              key=$(az storage account keys list                 --resource-group tfstate-shared-rg                 --account-name sttfstateshared                 --query '[0].value' -o tsv)
              echo "STORAGE_KEY=${key}" >> $GITHUB_ENV
            shell: bash

          - name: Create terraform.auto.tfvars (safe)
            shell: bash
            run: |
              if [ -z "${{ secrets.ADMIN_SSH_PUB }}" ]; then
                echo "ERROR: ADMIN_SSH_PUB secret is missing or empty. Create repo secret ADMIN_SSH_PUB containing your SSH public key (ssh-rsa ...)." >&2
                exit 1
              fi

              cat > terraform.auto.tfvars <<EOF
              resource_group_name = "web-server-rg"
              location = "eastus"
              admin_ssh_public_key = "${{ secrets.ADMIN_SSH_PUB }}"
              EOF

              # show small confirmation (do NOT print the secret)
              echo "Wrote terraform.auto.tfvars (bytes: $(wc -c < terraform.auto.tfvars))"

          - name: Terraform Init (with backend)
            env:
              STORAGE_KEY: ${{ env.STORAGE_KEY }}
            run: |
              terraform init                 -backend-config="storage_account_name=sttfstateshared"                 -backend-config="container_name=tfstate"                 -backend-config="key=web-server-vm.tfstate"                 -backend-config="access_key=${STORAGE_KEY}"
            shell: bash

          - name: Terraform Format (auto-fix)
            run: terraform fmt -write
            shell: bash

          - name: Terraform Validate
            run: terraform validate
            shell: bash

          - name: Terraform Plan
            run: terraform plan -out=tfplan -input=false
            shell: bash

          - name: Terraform Apply
            if: github.ref == 'refs/heads/main'
            run: terraform apply -input=false -auto-approve tfplan
            shell: bash
